{"version":3,"sources":["api/petfinder/index.js","components/hero/index.js","pages/home/index.js","components/pet/index.js","pages/search/index.js","pages/detail/index.js","pages/petDetailsNotFound/index.js","assets/logo.svg","components/search/index.js","components/navigation/index.js","App.js","reportWebVitals.js","index.js","mocks/handlers.js","mocks/browser.js"],"names":["getPets","type","a","requestUrl","fetch","method","response","json","getPetDetails","id","getPetTypes","Hero","image","displayText","className","style","backgroundImage","backgroundBlendMode","backgroundSize","backgroundColor","getHeroTitle","HomePage","props","useState","data","setData","useEffect","petsData","animals","getPetsData","length","map","animal","to","toLowerCase","src","photos","medium","alt","name","breeds","primary","colors","gender","Pet","SearchPage","search","useLocation","queryParams","useMemo","URLSearchParams","pets","setPets","petNameToFind","get","searchMatches","filter","includes","pet","PetDetailsPage","loading","setLoading","error","setError","useParams","full","description","PetDetailsNotFound","history","useHistory","onClick","goBack","Search","searchInputRef","useRef","onSubmit","e","preventDefault","searchQuery","current","value","toString","trim","push","ref","Navigation","petTypes","setPetTypes","types","getPetTypesData","Logo","activeClassName","exact","_links","self","href","split","pop","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","require","worker","start","ReactDOM","render","StrictMode","document","getElementById","handlers","rest","_req","res","ctx","status","req","url","searchParams","query","contact","address","state","params","details","setupWorker"],"mappings":"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","file":"static/js/main.64e0923a.chunk.js","sourcesContent":["export const getPets = async (type) => { //modified so that it's no longer (type = '', query = '')\r\n  //const searchParams = new URLSearchParams({ type, query });\r\n  //const requestUrl = `/animals?${searchParams.toString()}`;\r\n  let petType;\r\n  if(type === 'cat') {\r\n    petType = 'cat';\r\n  } else if(type === 'dog') {\r\n    petType = 'dog';\r\n  } else if(type === 'rabbit') {\r\n    petType = 'rabbit';\r\n  } else if(type === 'bird') {\r\n    petType = 'bird';\r\n  } else {\r\n    petType = 'animals';\r\n  }\r\n\r\n  const requestUrl = `https://chris-larham-1983.github.io/json_data/${petType}.json`;\r\n\r\n  const response = await fetch(requestUrl, {\r\n    method: 'GET'\r\n  });\r\n\r\n  const json = await response.json();\r\n\r\n  return json;\r\n};\r\n\r\nexport const getPetDetails = async (id) => {\r\n  const requestUrl = `https://chris-larham-1983.github.io/json_data/${id}.json`;\r\n  const response = await fetch(requestUrl, {\r\n    method: 'GET'\r\n  });\r\n\r\n  const json = await response.json();\r\n\r\n  return json;\r\n};\r\n\r\nexport const getPetTypes = async () => {\r\n  //const requestUrl = `/types`;\r\n  const requestUrl = `https://chris-larham-1983.github.io/json_data/types.json`;\r\n\r\n  const response = await fetch(requestUrl, {\r\n    method: 'GET'\r\n  });\r\n\r\n  const json = await response.json();\r\n\r\n  return json;\r\n};\r\n","import React from 'react';\r\n\r\nconst Hero = ({ image, displayText }) => {\r\n  const type = ''\r\n\r\n  return (\r\n    <div\r\n      className=\"hero-container\"\r\n      style={{\r\n        backgroundImage: `linear-gradient(black, black), url(\"${\r\n          image || 'https://chris-larham-1983.github.io/images/pets-hero.png'\r\n        }\")\r\n          `,\r\n        backgroundBlendMode: 'saturation',\r\n        backgroundSize: 'cover',\r\n        backgroundColor: '#0000008f'\r\n      }}\r\n    >\r\n      <h2>{displayText || getHeroTitle(type)}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hero;\r\n\r\nconst getHeroTitle = (type) => {\r\n  switch (type) {\r\n    case 'dog':\r\n      return 'Dogs';\r\n    case 'cat':\r\n      return 'Cats';\r\n    case 'rabbit':\r\n      return 'Rabbits';\r\n    case 'bird':\r\n      return 'Birds';\r\n    default:\r\n      return 'Find your perfect pet';\r\n  }\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { getPets } from '../../api/petfinder';\r\nimport Hero from '../../components/hero';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst HomePage = (props) => {\r\n\r\n  const [data, setData] = useState(null);\r\n  const type = props.type;\r\n\r\n  useEffect(() => {\r\n    async function getPetsData() {\r\n      let petsData = await getPets(type);\r\n      setData(petsData.animals);\r\n    }\r\n\r\n    getPetsData();\r\n  }, [type]);\r\n\r\n  if (!data) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <Hero />\r\n      <h3>\r\n        <span className=\"pet-type-label\">{type ? `${type}s` : 'Pets'}</span>{' '}\r\n        available for adoption near you\r\n      </h3>\r\n\r\n      {data.length ? (\r\n        <div className=\"grid\">\r\n          {data.map((animal) => (\r\n            <Link // Change me to a Link!\r\n              key={animal.id}\r\n              to={`/${animal.type.toLowerCase()}/${animal.id}`}\r\n              className=\"pet\"\r\n            >\r\n              <article>\r\n                <div className=\"pet-image-container\">\r\n                  {\r\n                    <img\r\n                      className=\"pet-image\"\r\n                      src={\r\n                        animal.photos[0]?.medium ||\r\n                        'https://chris-larham-1983.github.io/images/missing-animal.png'\r\n                      }\r\n                      alt=\"\"\r\n                    />\r\n                  }\r\n                </div>\r\n                <h3>{animal.name}</h3>\r\n                <p>Breed: {animal.breeds.primary}</p>\r\n                <p>Color: {animal.colors.primary}</p>\r\n                <p>Gender: {animal.gender}</p>\r\n              </article>\r\n            </Link> // Don't forget to change me!\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <p className=\"prompt\">No {type}s available for adoption now.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Pet = ({ animal }) => {\r\n  return (\r\n    <Link\r\n      key={animal.id}\r\n      to={`/${animal.type.toLowerCase()}/${animal.id}`}\r\n      className=\"pet\"\r\n    >\r\n      <article>\r\n        <div className=\"pet-image-container\">\r\n          {\r\n            <img\r\n              className=\"pet-image\"\r\n              src={\r\n                animal.photos[0]?.medium || 'https://i.imgur.com/aEcJUFK.png'\r\n              }\r\n              alt=\"\"\r\n            />\r\n          }\r\n        </div>\r\n        <h3>{animal.name}</h3>\r\n        <p>Breed: {animal.breeds.primary}</p>\r\n        <p>Color: {animal.colors.primary}</p>\r\n        <p>Gender: {animal.gender}</p>\r\n      </article>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default Pet;\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport Hero from '../../components/hero';\r\nimport { getPets } from '../../api/petfinder';\r\nimport Pet from '../../components/pet';\r\nimport { useLocation } from 'react-router';\r\n\r\nconst SearchPage = () => {\r\n\r\n  const { search } = useLocation();\r\n\r\n  const queryParams = useMemo(() => { \r\n    return new URLSearchParams(search);\r\n  }, [search]);\r\n\r\n  const [pets, setPets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getPetsData() {\r\n      const petNameToFind = queryParams.get('name');\r\n      const petsData = await getPets(petNameToFind);\r\n      const searchMatches = petsData.animals.filter((animal) => {\r\n        return animal.name.toLowerCase().includes(petNameToFind.toLowerCase());\r\n      });\r\n\r\n      setPets(searchMatches);\r\n    }\r\n\r\n    getPetsData();\r\n  }, [queryParams]);\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <Hero displayText={`Results for ${queryParams.get('name')}`} />\r\n\r\n      <h3>Pets available for adoption near you</h3>\r\n\r\n      <main>\r\n        <div className=\"grid\">\r\n          {pets.map((pet) => (\r\n            <Pet animal={pet} key={pet.id} />\r\n          ))}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { getPetDetails } from '../../api/petfinder';\r\nimport Hero from '../../components/hero';\r\n\r\nimport { useParams, Redirect } from 'react-router-dom';\r\n\r\nconst PetDetailsPage = () => {\r\n  const [data, setData] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    async function getPetsData() {\r\n      try {\r\n        const petsData = await getPetDetails(id);\r\n        setData(petsData);\r\n        setError(false);\r\n      } catch (e) {\r\n        setError(true);\r\n      }\r\n      setLoading(false);\r\n    }\r\n\r\n    getPetsData();\r\n  }, [id]);\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <h3>Loading...</h3>\r\n      ) : error ? (\r\n        <div>\r\n          <Redirect to=\"/pet-details-not-found\" />\r\n        </div>\r\n      ) : (\r\n        <main>\r\n          <Hero\r\n            image={data.photos[1]?.full || 'https://i.imgur.com/aEcJUFK.png'}\r\n            displayText={`Meet ${data.name}`}\r\n          />\r\n          <div className=\"pet-detail\">\r\n            <div className=\"pet-image-container\">\r\n              <img\r\n                className=\"pet-image\"\r\n                src={\r\n                  data.photos[0]?.medium || 'https://i.imgur.com/aEcJUFK.png'\r\n                }\r\n                alt=\"\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <h1>{data.name}</h1>\r\n              <h3>Breed: {data.breeds.primary}</h3>\r\n              <p>Color: {data.colors.primary || 'Unknown'}</p>\r\n              <p>Gender: {data.gender}</p>\r\n              <h3>Description</h3>\r\n              <p>{data.description}</p>\r\n            </div>\r\n          </div>\r\n        </main>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PetDetailsPage;\r\n","import React from 'react';\r\n\r\n// import useHistory here.\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst PetDetailsNotFound = () => {\r\n\r\n  // get the history object from useHistory()\r\n  const history = useHistory();\r\n\r\n  const goBack = () => {\r\n    // Go back!\r\n    history.goBack();\r\n  }\r\n  \r\n  return (\r\n    <main className=\"page\">\r\n      <h3>404: Who let the dogs out?</h3>\r\n      <p>Sorry, but the details for this pet have not been uploaded by the shelter yet. Check back later!</p>\r\n      <img\r\n        src=\"https://i.chzbgr.com/full/8362031616/h9EB970C5/weve-lost-our-corgination\"\r\n        alt=\"\"\r\n      />\r\n      <div className=\"actions-container\">\r\n        <button className=\"button\" onClick={goBack}>\r\n          Go Back\r\n        </button>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default PetDetailsNotFound;\r\n","export default __webpack_public_path__ + \"static/media/logo.b10af21f.svg\";","import React, { useRef } from 'react';\r\n\r\n// import useHistory here.\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Search = () => {\r\n\r\n  // get the history object here\r\n  const history = useHistory();\r\n\r\n  const searchInputRef = useRef();\r\n\r\n  const onSearchHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    const searchQuery = new URLSearchParams({\r\n      name: searchInputRef.current.value\r\n    }).toString();\r\n    //if no search term was entered:\r\n    if(searchQuery.trim().length === 5) {\r\n      return;\r\n    }\r\n    // imperatively redirect with history.push()\r\n    history.push('/search?' + searchQuery)\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSearchHandler} className=\"search-form\">\r\n      <input type=\"text\" className=\"search\" ref={searchInputRef} />\r\n      <button type=\"submit\" className=\"search-button\">\r\n        🔎\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { getPetTypes } from '../../api/petfinder';\r\nimport Logo from '../../assets/logo.svg';\r\nimport Search from '../search';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Navigation = () => {\r\n  const [petTypes, setPetTypes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getPetTypesData() {\r\n      const { types } = await getPetTypes();\r\n      setPetTypes(types);\r\n    }\r\n\r\n    getPetTypesData();\r\n  }, []);\r\n\r\n  return (\r\n      <nav>\r\n        <div className=\"nav-logo\">\r\n          <img src={Logo} alt=\"Petlover\" />\r\n          <Search />\r\n        </div>\r\n        <ul className=\"nav-links\">\r\n          <li key={'all'}>\r\n            {/* This link should have an activeClassName and exact prop */}\r\n            <NavLink to=\"/debugging-test/\"\r\n                     className=\"nav-link\"\r\n                     activeClassName='nav-link-active'\r\n                     exact\r\n            >\r\n              All Pets\r\n            </NavLink>\r\n          </li>\r\n          {petTypes\r\n              ? petTypes.map((type) => (\r\n                  <li key={type.name}>\r\n                    {/* These links should have an activeClassName prop */}\r\n                    <NavLink to={`/${type._links.self.href.split('/').pop()}`}\r\n                             key={type.name}\r\n                             className=\"nav-link\"\r\n                             activeClassName='nav-link-active'\r\n                    >\r\n                      {type.name}s\r\n                    </NavLink>{' '}\r\n                  </li>\r\n              ))\r\n              : 'Loading...'}\r\n        </ul>\r\n      </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n\r\n","import HomePage from './pages/home';\r\nimport SearchPage from './pages/search';\r\nimport PetDetailsPage from './pages/detail';\r\nimport PetDetailsNotFound from './pages/petDetailsNotFound';\r\nimport Navigation from './components/navigation';\r\n\r\nimport { \r\n  BrowserRouter as Router, \r\n  Route, \r\n  Switch \r\n} from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Navigation />\r\n      <Switch>\r\n        <Route path='/pet-details-not-found'>\r\n          <PetDetailsNotFound/>\r\n        </Route>\r\n        <Route path='/search'>\r\n          <SearchPage/>\r\n        </Route>\r\n        <Route path='/:type/:id'>\r\n          <PetDetailsPage/>\r\n        </Route>\r\n        <Route path='/cat'>\r\n          <HomePage type=\"cat\" />\r\n        </Route>\r\n        <Route path='/dog'>\r\n          <HomePage type=\"dog\" />\r\n        </Route>\r\n        <Route path='/rabbit'>\r\n          <HomePage type=\"rabbit\" />\r\n        </Route>\r\n        <Route path='/bird'>\r\n          <HomePage type=\"bird\" />\r\n        </Route>\r\n        <Route path='/'>\r\n          <HomePage type=\"\" />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst { worker } = require('./mocks/browser');\r\nworker.start();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { rest } from 'msw';\r\nimport types from './data/types.json';\r\nimport animals from './data/animals.json';\r\nimport details from './data/details.json';\r\n\r\nexport const handlers = [\r\n  rest.get('/types', (_req, res, ctx) => {\r\n    return res(ctx.status(200), ctx.json(types));\r\n  }),\r\n  rest.get('/animals', (req, res, ctx) => {\r\n    const type = req.url.searchParams.get('type');\r\n    const query = req.url.searchParams.get('query');\r\n    let response = animals.animals;\r\n\r\n    if (type !== '') {\r\n      response = response.filter(\r\n        (animal) => animal.type.toLowerCase() === type.toLowerCase()\r\n      );\r\n    }\r\n    if (query !== '') {\r\n      response = response.filter(\r\n        (animal) =>\r\n          animal.contact.address.state\r\n            .toLowerCase()\r\n            .includes(query.toLowerCase()) ||\r\n          animal.name.toLowerCase().includes(query.toLowerCase())\r\n      );\r\n    }\r\n    return res(ctx.status(200), ctx.json(response));\r\n  }),\r\n  rest.get('/animals/:id', (req, res, ctx) => {\r\n    const { id } = req.params;\r\n    let response = details[id];\r\n\r\n    if (!response) {\r\n      return res(ctx.status(404));\r\n    }\r\n\r\n    return res(ctx.status(200), ctx.json(response));\r\n  })\r\n];\r\n","import { setupWorker } from 'msw';\r\nimport { handlers } from './handlers';\r\n\r\nexport const worker = setupWorker(...handlers);\r\n"],"sourceRoot":""}